@inherits LayoutComponentBase
@implements IDisposable
@inject ICartService _cartService
@inject IDialogService _dialogService
@inject SweetAlertService _sweetAlertService
@inject NavigationManager _navigationManager

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>
<MudPopoverProvider />
<MudDialogProvider BackdropClick="false" Position="DialogPosition.Center" CloseOnEscapeKey="true" MaxWidth="MaxWidth.Large" BackgroundClass="my-custom-class" />
<MudSnackbarProvider />
 
<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())"></MudIconButton>
        <MudHidden Breakpoint="Breakpoint.SmAndDown"><MudText Typo="Typo.h6">Tommy Rooms 😁</MudText></MudHidden>
        <MudSpacer />

        <AuthLinks />

        <MudBadge Origin="Origin.TopRight" Content="@BadgeContent" Color="Color.Warning" Overlap="true" Style="position: relative;">
            <MudMenu Dense Size="Size.Medium" Icon="@Icons.Material.Outlined.ShoppingCart" Color="Color.Inherit">
                <MudStack Class="ma-4" AlignItems="AlignItems.Start" Spacing="2">
                    <MudText Typo="Typo.h5"> Shoping Cart 🗑 </MudText>
                    <MudDivider />

                    @foreach (var item in itemDTOs)
                    {
                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                            <MudAvatar Size="Size.Medium"><MudImage Src="@item.Photo"></MudImage></MudAvatar>
                            <MudItem>@item.Name - @item.PricePerNight</MudItem>
                            <MudIconButton OnClick="@(() => DeleteItemAsync(item))" Variant="Variant.Text" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" Edge="Edge.End" />
                        </MudStack>
                    }
                    <MudDivider />
                    <MudButton OnClick="GoToTemporalBooking" StartIcon="@Icons.Material.Outlined.BookOnline" Color="Color.Success"> Reservar </MudButton>
                </MudStack>
            </MudMenu>
        </MudBadge>

        <MudIconButton OnClick="@((e) => DarkModeToggle())" Icon="@_icon" Color="Color.Inherit" />
    </MudAppBar>

    <MudDrawer @bind-Open="@_drawerOpen"
               Variant="DrawerVariant.Responsive"
               Elevation="2"
               ClipMode="DrawerClipMode.Always">
        <TheLeftNavBar></TheLeftNavBar>
    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="px-2 px-sm-3 px-md-4 px-lg-5 pt-3">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode = true;
    private bool _drawerOpen = false;
    private MudTheme _theme = new();
    private string _icon = Icons.Material.Outlined.DarkMode;
    private int BadgeContent;
    private List<CartItemDTO> itemDTOs = [];

    private void DrawerToggle() => _drawerOpen = !_drawerOpen;
    private void GoToTemporalBooking() => _navigationManager.NavigateTo("/TemporalBooking");

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        _icon = _isDarkMode ? Icons.Material.Outlined.LightMode : Icons.Material.Outlined.DarkMode;
    }

    protected override async Task OnInitializedAsync()
    {
        itemDTOs = await _cartService.LoadAsync() ?? [];
        BadgeContent = _cartService.GetCount();
        _cartService.OnChangeAsync += LoadCartBookingsAsync;
        await LoadCartBookingsAsync();
    }

    protected override async Task OnParametersSetAsync() => await LoadCartBookingsAsync();

    private async Task LoadCartBookingsAsync()
    {
        try
        {
            itemDTOs = await _cartService.LoadAsync();
            BadgeContent = _cartService.GetCount();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            await _sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task DeleteItemAsync(CartItemDTO itemDTO)
    {
        try
        {
            await _cartService.RemoveItemAsync(itemDTO);
            BadgeContent = _cartService.GetCount();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            await _sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    public void Dispose()
    {
        _cartService.OnChangeAsync -= LoadCartBookingsAsync;
    }
}
