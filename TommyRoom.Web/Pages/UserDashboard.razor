@page "/UserDashboard"
@attribute [Authorize(Roles = "SuperAdmin,User")]
@inject ISnackbar _snackbar
@inject IRepository _repository
@inject ILoginService _logInService
@inject IDialogService _dialogService
@inject NavigationManager _navigationManager
@inject SweetAlertService _sweetAlertService

<PageTitle>UserDashboard</PageTitle>

<MudGrid>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=3</MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=3</MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=3</MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=3</MudPaper>
    </MudItem>
</MudGrid>

<MudTable Items="@Products" Bordered="true" Hover="true" FixedHeader="true" Loading="@_loading" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h4"> Products Index </MudText>
    </ToolBarContent>

    <HeaderContent>
        <MudTh> FullName </MudTh>
        <MudTh> Email </MudTh>
        <MudTh> PhoneNumber </MudTh>
        <MudTh>  </MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="FullName">
            <div class="d-flex flex-column justify-center gap-3" style="align-items: center;">
                <img src="@context.Photo" width="80" height="80" style="border-radius:50%" />
                <span> @context.FullName </span>
            </div>
        </MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Color="Color.Success"> Vender </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Warning"> Editar </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Error"> Eliminar </MudButton>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5, 10, 15 }" />
    </PagerContent>
</MudTable>


@code {
    private IEnumerable<User> Products = [];
    private bool _loading = true;
    private int counter = 0;

    protected async override Task OnInitializedAsync() => await LoadAsync();
    // protected async override Task OnParametersSetAsync() => await LoadCounterAsync();

    private async Task LoadAsync()
    {
        try
        {
            var responseHppt = await _repository.GetAsync<List<User>>("api/Accounts/AllUsers");
            Products = responseHppt.Response!;
            _loading = false;
        }
        catch (Exception ex)
        {
            await _sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    // private async Task OpenCreatedDialogAsync()
    // {
    //     var options = new DialogOptions { CloseOnEscapeKey = true, BackgroundClass = "my-custom-class", MaxWidth = MaxWidth.ExtraLarge };
    //     var dialog = await _dialogService.ShowAsync<ProductForm>("Modal Created", options);
    //     var result = await dialog.Result;
    //     if (!result!.Canceled) await LoadAsync();
    // }

    // private Task OpenEditDialogAsync()
    // {
    //     var options = new DialogOptions { CloseOnEscapeKey = true, BackgroundClass = "my-custom-class" };
    //     return _dialogService.ShowAsync<ModalCreated>("Modal Edit", options);
    // }

    // private async Task OpenDeleteConfirnAsync(int productId)
    // {
    //     var options = new DialogOptions { CloseOnEscapeKey = true, BackgroundClass = "my-custom-class" };
    //     var dialog = await _dialogService.ShowAsync<TheModalDelete>("Modal Delete", options);
    //     var result = await dialog.Result;

    //     if (!result!.Canceled)
    //     {
    //         var responseHTTP = await _repository.DeleteAsync($"api/AdminProducts/{productId}");

    //         if (responseHTTP.Error)
    //         {
    //             if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
    //             {
    //                 _navigationManager.NavigateTo("/ProductsIndex");
    //                 return;
    //             }

    //             var mensajeError = await responseHTTP.GetErrorMessageAsync();
    //             await _sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
    //             return;
    //         }

    //         await LoadAsync();
    //     }
    // }
}
