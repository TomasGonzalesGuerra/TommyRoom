@inject ISnackbar _snackbar
@inject IRepository _repository
@inject ILoginService _loginService
@inject IDialogService _dialogService
@inject NavigationManager _navigationManager

<PageTitle> LogIn 🤞 </PageTitle>

<MudDialog>
    <DialogContent>
        <EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
            <DataAnnotationsValidator />

            <MudGrid Class="mb-4">
                <MudItem xs="12" sm="12">
                    <MudTextField Label="Email" @bind-Value="@loginDTO.Email" InputType="InputType.Email"></MudTextField>
                    <ValidationMessage For="@(() => loginDTO.Email)" />
                </MudItem>

                <MudItem xs="12" sm="12">
                    <MudTextField Label="Password" @bind-Value="@loginDTO.Password" InputType="InputType.Password"></MudTextField>
                    <ValidationMessage For="@(() => loginDTO.Password)" />
                </MudItem>
            </MudGrid>

            <MudGrid Class="mb-4">
                <MudItem xs="12" sm="6" Class="d-flex justify-content-center">
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Login" Color="Color.Primary" ButtonType="ButtonType.Submit" FullWidth="true">
                        Login
                    </MudButton>
                </MudItem>

                <MudItem xs="12" sm="6" Class="d-flex justify-content-center">
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" OnClick="CloseModal" FullWidth="true">
                        Cancel
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>

    <DialogActions>
        <MudStack Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.Center">
            <MudLink Href="/Register" Underline="Underline.Always" Color="Color.Info" Class="mt-4">
                NotUserYet
            </MudLink>

            <MudLink OnClick="ShowModalRecoverPassword" Underline="Underline.Always" Color="Color.Secondary">
                ForgottenYourPassword
            </MudLink>

            <MudLink OnClick="ShowModalResendConfirmationEmail" Underline="Underline.Always" Color="Color.Warning">
                ResendAccountActivationEmail
            </MudLink>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;
    private LoginDTO loginDTO = new();
    private bool wasClose;


    private void ShowModalRecoverPassword()
    {
        var closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraLarge };
        _dialogService.ShowAsync<RecoverPassword>("PasswordRecovery", closeOnEscapeKey);
    }

    private void CloseModal()
    {
        wasClose = true;
        MudDialog.Cancel();
    }

    private void ShowModalResendConfirmationEmail()
    {
        var closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.ExtraLarge };
        _dialogService.ShowAsync<ResendConfirmationEmailToken>("MailForwarding", closeOnEscapeKey);
    }

    private async Task LoginAsync()
    {
        if (wasClose)
        {
            _navigationManager.NavigateTo("/");
            return;
        }

        var responseHttp = await _repository.PostAsync<LoginDTO, TokenDTO>("api/Accounts/Login", loginDTO);

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            _snackbar.Add(message!, Severity.Error);
            return;
        }

        await _loginService.LoginAsync(responseHttp.Response!.Token);
        _navigationManager.NavigateTo("/");
    }
}