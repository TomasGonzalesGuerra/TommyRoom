@page "/ChangePassword"
@inject ISnackbar _snackbar
@inject IRepository _repository
@inject ILoginService _logInService
@inject IDialogService _dialogService
@inject NavigationManager _navigationManager
@inject SweetAlertService _sweetAlertService
@attribute [Authorize(Roles = "SuperAdmin,User")]

<PageTitle> Change Password </PageTitle>

<MudCard Class="p-2">
    <MudItem>
        <MudText Typo="Typo.h5"> Cambio de Conttraseña</MudText>
    </MudItem>

    <EditForm Model="changePasswordDTO">
        <DataAnnotationsValidator />

        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudCardContent>
                    <MudTextField Label="Password" @bind-Value="changePasswordDTO.CurrentPassword" For="@(() => changePasswordDTO.CurrentPassword)" InputType="InputType.Password"></MudTextField>
                    <MudTextField Label="New Password" @bind-Value="changePasswordDTO.NewPassword" For="@(() => changePasswordDTO.NewPassword)" InputType="InputType.Password"></MudTextField>
                    <MudTextField Label="New PasswordConfirm" @bind-Value="changePasswordDTO.PasswordConfirm" For="@(() => changePasswordDTO.PasswordConfirm)" InputType="InputType.Password"></MudTextField>
                </MudCardContent>
            </MudItem>

            <MudStack Class="m-2" Row="true">
                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Surface" OnClick="ReturnAction" Class="ms-8">
                    Return
                </MudButton>

                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="ChangePasswordAsync">
                    Guardar
                </MudButton>
            </MudStack>
        </MudGrid>
    </EditForm>
</MudCard>


@code {
    private ChangePasswordDTO changePasswordDTO = new();
    private bool _loading;


    private async Task ChangePasswordAsync()
    {
        _loading = true;
        var responseHttp = await _repository.PostAsync("/api/accounts/ChangePassword", changePasswordDTO);
        
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await _sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            _loading = false;
            return;
        }
        
        _loading = false;
        _navigationManager.NavigateTo("/EditUser");
        
        var toast = _sweetAlertService.Mixin(new SweetAlertOptions
        {
            Toast = true,
            Position = SweetAlertPosition.TopEnd,
            ShowConfirmButton = true,
            Timer = 5000
        });

        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Contraseña cambiada con éxito.");
    }

    private void ReturnAction() => _navigationManager.NavigateTo("/EditUser");
}
